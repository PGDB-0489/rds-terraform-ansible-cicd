name: Terraform CI/CD

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform-rds-postgres-free-tier/**'
      - '.github/workflows/aws_rds_deploy.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform-rds-postgres-free-tier/**'
      - '.github/workflows/aws_rds_deploy.yml'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write  # required for OIDC authentication with AWS

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: ./terraform-rds-postgres-free-tier
      AWS_REGION: us-east-1
      ENVIRONMENT: dev
      PROJECT: rds-free-tier

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::677276085413:role/github-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=argha-cicd-tf-state-bucket" \
            -backend-config="key=${{ env.ENVIRONMENT }}/terraform-rds-postgres-free-tier/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-state-locks" \
            -backend-config="encrypt=true"

      - name: Terraform Format
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -var="environment=${{ env.ENVIRONMENT }}" -out=tfplan
        continue-on-error: true

      - name: Check Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply (auto-approve on main)
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Get DB credentials from Secrets Manager
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          SECRET_NAME="${PROJECT}-${ENVIRONMENT}-db-credentials2"
          echo "Fetching secret: ${SECRET_NAME}"
          aws secretsmanager get-secret-value --secret-id "${SECRET_NAME}" --query SecretString --output text > secret.json
          cat secret.json

      - name: Install Ansible and PostgreSQL collection
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          python -m pip install --upgrade pip
          pip install ansible psycopg2-binary
          ansible-galaxy collection install community.postgresql

      - name: Build Ansible inventory and variables
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          DB_HOST=$(jq -r '.host' secret.json)
          DB_PORT=$(jq -r '.port' secret.json)
          DB_USER=$(jq -r '.username' secret.json)
          DB_PASS=$(jq -r '.password' secret.json)
          DB_NAME=$(jq -r '.dbname' secret.json)

          cat > inventory.ini <<EOF
          [db]
          localhost ansible_connection=local

          [db:vars]
          db_host=${DB_HOST}
          db_port=${DB_PORT}
          db_user=${DB_USER}
          db_pass=${DB_PASS}
          db_name=${DB_NAME}
          EOF

          echo "Inventory created:" && cat inventory.ini

      - name: Run Ansible playbook to create DB objects
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          ansible-playbook ansible/create_db_objects.yml -i inventory.ini
